<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <link href="styles.css" rel="stylesheet">
    <script src="canvas-all.js"></script>
    <script src="canvas-starter.js"></script>
    <script src="canvas-services.js"></script>
    <script src="canvas-init.js"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
</head>
<body>

    <!--script src="/public/canvas-all.js"></script>
    <script src="/node_modules/%40salesforce/canvas-js-sdk/js/canvas-all.js"></script>
    <script type="text/javascript" src="https://testcanvas1-dev-ed.my.salesforce.com/canvas/sdk/js/49.0/canvas-all.js"></script-->

  
  
   
<script>
var sr;
Sfdc.canvas.onReady(function () {
    console.log("Canvas application ready");
    Sfdc.canvas.client.refreshSignedRequest(function(data) {
        console.log(data.status);
        if (data.status === 200) {
           
            signedRequest =  data.payload.response;
            var part = signedRequest.split('.')[1];
            var obj = JSON.parse(Sfdc.canvas.decode(part));
            sr=obj;
            console.log(signedRequest);
            console.log(part);
            console.log(obj);
        }
    });
});




console.log(sr);


</script>




<div class="canvas-app" id="app" >
    <img src="nodejs.png"/>
    <p>Hello, <%= context.user.firstName %>. 
        This is a web app written in Node.js embedded in your Salesforce page (It could also be written in any other language).</p>
    <p>It is aware of its environment. For example, here are a few things it knows:</p>
    
    
    
    <div>
        <br>
        <h2 class="sub-title">Querying Salesforce Data A</h2>
        <p>Once initialized, you can use the following function to query Salesforce. </p>
        <pre>  cnv.querySalesforce(query,callback)</pre>
        <pre>  //query for my 6 most recently viewed accounts
          var query = 'SELECT Id,Name,LastViewedDate FROM Account ORDER BY LastViewedDate DESC NULLS LAST LIMIT 6'
          cnv.querySalesforce(query,callback);</pre>
        <div style="color:rgb(0,112,210)">
          <button id="recentSfAccounts" onclick="recentSfAccounts()">try this example</button>
        </div>
        <br>
        <ul class="sfQueryResults">
        </ul>
        
        </div>
        <div>
            <br>
            <h2 class="sub-title">Querying Salesforce Data B</h2>
            <p>You can expirment with your SOQL here and see how the data (including error messages) 
                is returned from the Canvas SDK below.</p>
            </br>
            <textarea rows="5" class="slds-textarea" id="query" placeholder="foo"></textarea>
            <br>
            <div style="color:rgb(0,112,210)">
              <button id="runQuery" onclick="runQuery();">try this example</button>
              <button id="clearResult" onclick="clearResult();">clear result</button>
            </div>
            <pre class="sfQueryResult"></pre>
            </div>
          
            <div>
                <br/>
                <h2 class="sub-title">Editing Salesforce Data</h2>
                <p>Once initialized, you can use the following functions to create, edit and delete salesforce records. </p>
                <pre>  //edit function
                  cnv.editSalesforce(object,request,callback)
                  //delete function
                  cnv.deleteSalesforce(object, id, callback)
                </pre>
                <p>If the Id property is set in the request object, then the function will PATCH the specified record with the request object. If the Id property is not included in the request object, then a new record will be created via POST.</p>
                <h3 class="sub-title">Example 2</h3>
                <pre>  //create a new Task for tomorrow
                  var due = new Date();
                  //for tasks, we just pass the date part of the string.
                  due.setDate(due.getDate()+1).toISOString();
                  var request = {'ActivityDate':due.substring(0,10), 'Subject':'Test Task From the canvas-starter-kit'}
                  cnv.editSalesforce('Task', request, callback);
                </pre>
                <div style="color:rgb(0,112,210)">
                  <button id="newTask" onclick="newTask()">try this example</button>
                </div>
                <br/>
                <div id="sfEditResult">
                </div>
                
               
        <script src="ejs.js"></script>
        <script src="queryA.js"></script>
        <script src="queryB.js"></script>
        <script src="editing.js"></script>
    
    <table>
        <tr><td>User:</td><td><%= context.user.fullName %></td></tr>
        <tr><td>Object:</td><td><%= context.environment.record.attributes.type %></td></tr>
        <tr><td>Id:</td><td><%= context.environment.record.Id %></td></tr>
    </table>


<!-- 

    <table>
        <tr><td>FirstName:</td><td><%= contact.FirstName %></td></tr>
        <tr><td>LastName:</td><td><%= contact.LastName %></td></tr>
        <tr><td>Phone:</td><td><%= contact.Phone %></td></tr>
        <tr><td>Email:</td><td><%= contact.Email %></td></tr>
    </table>
  
<input type="text" value="<%= contact.Email %>"/>

<button class="btn btn-success" id="like">Install</button>


<script>

    $("#like").click(function(){
        $.post("/updaterecord",
        '<%- JSON.stringify(contact) %>' ,
        function(data,status){
          console.log("Data: " + data + "\nStatus: " + status);
        });
      });


</script>



    <p>It can also access more data in Salesforce using the REST APIs. With context and APIs, Canvas makes it easy to integrate applications written in any language inside your Salesforce pages.</p>
    <p>For example, the QR Code below is generated in Node.js. Scan it to create a contact on your mobile phone:</p>
    <%- imgTag %>
-->
</div>
</body>
